[gd_scene load_steps=32 format=2]

[ext_resource path="res://sprites/GUI/tophud.png" type="Texture" id=1]
[ext_resource path="res://sprites/GUI/buttonmenu2.png" type="Texture" id=2]
[ext_resource path="res://sprites/GUI/buttonmenu1.png" type="Texture" id=3]
[ext_resource path="res://Scenes/UI.gd" type="Script" id=4]
[ext_resource path="res://sprites/GUI/barcoicon.png" type="Texture" id=5]
[ext_resource path="res://sprites/GUI/dashicon.png" type="Texture" id=6]
[ext_resource path="res://sprites/GUI/bombicon.png" type="Texture" id=7]
[ext_resource path="res://sprites/GUI/radicon.png" type="Texture" id=8]
[ext_resource path="res://sprites/GUI/lasericon.png" type="Texture" id=9]
[ext_resource path="res://sprites/GUI/new_shadermaterial.tres" type="Material" id=10]
[ext_resource path="res://sprites/GUI/pusopen.png" type="Texture" id=11]
[ext_resource path="res://sprites/GUI/pushok.png" type="Texture" id=12]
[ext_resource path="res://sprites/GUI/noise.png" type="Texture" id=18]
[ext_resource path="res://sprites/GUI/characters.png" type="Texture" id=19]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform sampler2D chars;
uniform sampler2D noise_tex; 

void fragment() {
	// Random character
	vec2 uv = fract(UV * 32.0); // loop uv 32 times for the characters (as the noise resolution is 32x32)
	float noise = texture(noise_tex, UV).g;
	noise = round(noise * 10.0) / 10.0; // make sure the color value are snapped by 0.1 (so its only 0.0, 0.1, 0.2, and so on) for perfect offset
	uv.x = (uv.x / 10.0) - 0.005; // offset
	uv.x += noise; // offset every character by the noise value
	uv.x += round(TIME * 0.5 * 10.0)/10.0; // animate characters with TIME, then snapped by 0.1 so it doesnt slide. 0.5 is the speed, you might want to change that
	
	// distortion
	float rain = UV.y; // this is a vertical gradient
	float distortion = texture(noise_tex, UV / vec2(1.0, 32.0)).g; // this will be used for distortion, using previous noise but only horizontal
	distortion = round(distortion * 10.0) / 10.0; // for precision reason, you need to round your distortion too, otherwise some character wouldnt be fully shown
	rain -= round(TIME * 0.2 * 32.0) / 32.0; // the 'rain' shouldn't move smoothly right? also, 0.2 is the speed
	rain += distortion; // distort this gradient, turning it into a rain
	rain = fract(rain); // loop the rain
	rain = round(rain * 16.0) / 16.0; // pixelate the rain. Rounding by 32.0 or 8.0 is optional
	rain = pow(rain, 3.0); // this is not necessary, i just think that it looks good
	rain *= 2.0; // this is also not important, just making the characters brighter
	
	COLOR.rgb = texture(chars, uv).rgb * rain * vec3(0.0, 1.0, 0.0); // finally multiply them together then multiply with green for the color
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/chars = ExtResource( 19 )
shader_param/noise_tex = ExtResource( 18 )

[sub_resource type="Shader" id=12]
code = "shader_type canvas_item;

uniform sampler2D chars;
uniform sampler2D noise_tex; 

void fragment() {
	// Random character
	vec2 uv = fract(UV * 32.0); // loop uv 32 times for the characters (as the noise resolution is 32x32)
	float noise = texture(noise_tex, UV).g;
	noise = round(noise * 10.0) / 10.0; // make sure the color value are snapped by 0.1 (so its only 0.0, 0.1, 0.2, and so on) for perfect offset
	uv.x = (uv.x / 10.0) - 0.005; // offset
	uv.x += noise; // offset every character by the noise value
	uv.x += round(TIME * 0.5 * 10.0)/10.0; // animate characters with TIME, then snapped by 0.1 so it doesnt slide. 0.5 is the speed, you might want to change that
	
	// distortion
	float rain = UV.y; // this is a vertical gradient
	float distortion = texture(noise_tex, UV / vec2(1.0, 32.0)).g; // this will be used for distortion, using previous noise but only horizontal
	distortion = round(distortion * 10.0) / 10.0; // for precision reason, you need to round your distortion too, otherwise some character wouldnt be fully shown
	rain -= round(TIME * 0.2 * 32.0) / 32.0; // the 'rain' shouldn't move smoothly right? also, 0.2 is the speed
	rain += distortion; // distort this gradient, turning it into a rain
	rain = fract(rain); // loop the rain
	rain = round(rain * 16.0) / 16.0; // pixelate the rain. Rounding by 32.0 or 8.0 is optional
	rain = pow(rain, 3.0); // this is not necessary, i just think that it looks good
	rain *= 2.0; // this is also not important, just making the characters brighter
	
	COLOR.rgb = texture(chars, uv).rgb * rain * vec3(0.0, 1.0, 0.0); // finally multiply them together then multiply with green for the color
	COLOR.rgb = texture(chars, uv).rgb * rain * vec3(0.0, 1.0, 0.0); // finally multiply them together then multiply with green for the color
}"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 12 )
shader_param/chars = ExtResource( 19 )
shader_param/noise_tex = ExtResource( 18 )

[sub_resource type="Shader" id=14]
code = "shader_type canvas_item;

uniform sampler2D chars;
uniform sampler2D noise_tex; 
uniform vec3 color_sample;

void fragment() {
	// Random character
	vec2 uv = fract(UV * 32.0); // loop uv 32 times for the characters (as the noise resolution is 32x32)
	float noise = texture(noise_tex, UV).g;
	noise = round(noise * 10.0) / 10.0; // make sure the color value are snapped by 0.1 (so its only 0.0, 0.1, 0.2, and so on) for perfect offset
	uv.x = (uv.x / 10.0) - 0.005; // offset
	uv.x += noise; // offset every character by the noise value
	uv.x += round(TIME * 0.5 * 10.0)/10.0; // animate characters with TIME, then snapped by 0.1 so it doesnt slide. 0.5 is the speed, you might want to change that
	
	// distortion
	float rain = UV.y; // this is a vertical gradient
	float distortion = texture(noise_tex, UV / vec2(1.0, 32.0)).g; // this will be used for distortion, using previous noise but only horizontal
	distortion = round(distortion * 10.0) / 10.0; // for precision reason, you need to round your distortion too, otherwise some character wouldnt be fully shown
	rain -= round(TIME * 0.3 * 32.0) / 32.0; // the 'rain' shouldn't move smoothly right? also, 0.2 is the speed
	rain += distortion; // distort this gradient, turning it into a rain
	rain = fract(rain); // loop the rain
	rain = round(rain * 16.0) / 16.0; // pixelate the rain. Rounding by 32.0 or 8.0 is optional
	rain = pow(rain, 3.0); // this is not necessary, i just think that it looks good
	rain *= 2.0; // this is also not important, just making the characters brighter
	
	COLOR.rgb = texture(chars, uv).rgb * rain * color_sample; // finally multiply them together then multiply with green for the color
}"

[sub_resource type="ShaderMaterial" id=15]
shader = SubResource( 14 )
shader_param/color_sample = Vector3( 0, 0, 1 )
shader_param/chars = ExtResource( 19 )
shader_param/noise_tex = ExtResource( 18 )

[sub_resource type="Shader" id=16]
code = "shader_type canvas_item;

uniform sampler2D chars;
uniform sampler2D noise_tex; 
uniform vec3 color_sample;

void fragment() {
	// Random character
	vec2 uv = fract(UV * 32.0); // loop uv 32 times for the characters (as the noise resolution is 32x32)
	float noise = texture(noise_tex, UV).g;
	noise = round(noise * 10.0) / 10.0; // make sure the color value are snapped by 0.1 (so its only 0.0, 0.1, 0.2, and so on) for perfect offset
	uv.x = (uv.x / 10.0) - 0.005; // offset
	uv.x += noise; // offset every character by the noise value
	uv.x += round(TIME * 0.5 * 10.0)/10.0; // animate characters with TIME, then snapped by 0.1 so it doesnt slide. 0.5 is the speed, you might want to change that
	
	// distortion
	float rain = UV.y; // this is a vertical gradient
	float distortion = texture(noise_tex, UV / vec2(1.0, 32.0)).g; // this will be used for distortion, using previous noise but only horizontal
	distortion = round(distortion * 10.0) / 10.0; // for precision reason, you need to round your distortion too, otherwise some character wouldnt be fully shown
	rain -= round(TIME * 0.4 * 32.0) / 32.0; // the 'rain' shouldn't move smoothly right? also, 0.2 is the speed
	rain += distortion; // distort this gradient, turning it into a rain
	rain = fract(rain); // loop the rain
	rain = round(rain * 16.0) / 16.0; // pixelate the rain. Rounding by 32.0 or 8.0 is optional
	rain = pow(rain, 3.0); // this is not necessary, i just think that it looks good
	rain *= 2.0; // this is also not important, just making the characters brighter
	
	COLOR.rgb = texture(chars, uv).rgb * rain * color_sample; // finally multiply them together then multiply with green for the color
}"

[sub_resource type="ShaderMaterial" id=17]
shader = SubResource( 16 )
shader_param/color_sample = Vector3( 1, 0, 0 )
shader_param/chars = ExtResource( 19 )
shader_param/noise_tex = ExtResource( 18 )

[sub_resource type="Animation" id=3]
tracks/0/type = "value"
tracks/0/path = NodePath("UI/TopBar:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 550 ), Vector2( 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("UI/ColorRect:rect_position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0, -550 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("UI/ChangeMenu:rect_position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( -180, 85 ), Vector2( -210, -515 ) ]
}

[sub_resource type="Animation" id=4]
resource_name = "MenuClose"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("UI/ChangeMenu:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 85 ), Vector2( -180, 85 ) ]
}

[sub_resource type="Animation" id=5]
resource_name = "MenuOpen"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("UI/ChangeMenu:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( -180, 85 ), Vector2( 0, 85 ) ]
}

[sub_resource type="Animation" id=6]
tracks/0/type = "value"
tracks/0/path = NodePath("UI/TopBar:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 5 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0, 550 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("UI/ColorRect:rect_position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 5 ),
"update": 0,
"values": [ Vector2( 0, -550 ), Vector2( 0, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("UI/ChangeMenu:rect_position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( -210, -515 ), Vector2( -180, 85 ) ]
}

[sub_resource type="Animation" id=7]
tracks/0/type = "value"
tracks/0/path = NodePath("UI/TopBar/Icons/PowerUp1:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=8]
tracks/0/type = "value"
tracks/0/path = NodePath("UI/TopBar/Icons/PowerUp2:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=9]
tracks/0/type = "value"
tracks/0/path = NodePath("UI/TopBar/Icons/PowerUp3:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=10]
tracks/0/type = "value"
tracks/0/path = NodePath("UI/TopBar/Icons/PowerUp4:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=11]
tracks/0/type = "value"
tracks/0/path = NodePath("UI/TopBar/Icons/PowerUp5:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[node name="UI" type="Node"]
pause_mode = 2
script = ExtResource( 4 )

[node name="UI" type="CanvasLayer" parent="."]

[node name="TopBar" type="TextureRect" parent="UI"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = 0.00012207
margin_bottom = -550.0
texture = ExtResource( 1 )
stretch_mode = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Icons" type="HBoxContainer" parent="UI/TopBar"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 10.0
margin_top = 10.0
margin_right = -10.0
margin_bottom = -10.0
custom_constants/separation = 10
alignment = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="PowerUp1" type="TextureRect" parent="UI/TopBar/Icons"]
margin_left = 550.0
margin_right = 580.0
margin_bottom = 30.0
rect_min_size = Vector2( 30, 30 )
texture = ExtResource( 5 )

[node name="PowerUp2" type="TextureRect" parent="UI/TopBar/Icons"]
margin_left = 590.0
margin_right = 620.0
margin_bottom = 30.0
rect_min_size = Vector2( 30, 30 )
texture = ExtResource( 6 )

[node name="PowerUp3" type="TextureRect" parent="UI/TopBar/Icons"]
margin_left = 630.0
margin_right = 660.0
margin_bottom = 30.0
rect_min_size = Vector2( 30, 30 )
texture = ExtResource( 9 )

[node name="PowerUp4" type="TextureRect" parent="UI/TopBar/Icons"]
margin_left = 670.0
margin_right = 700.0
margin_bottom = 30.0
rect_min_size = Vector2( 30, 30 )
texture = ExtResource( 8 )

[node name="PowerUp5" type="TextureRect" parent="UI/TopBar/Icons"]
margin_left = 710.0
margin_right = 740.0
margin_bottom = 30.0
rect_min_size = Vector2( 30, 30 )
texture = ExtResource( 7 )

[node name="OpenMenu" type="TextureButton" parent="UI/TopBar/Icons"]
margin_left = 750.0
margin_right = 780.0
margin_bottom = 30.0
focus_mode = 0
enabled_focus_mode = 0
texture_normal = ExtResource( 3 )
texture_pressed = ExtResource( 2 )
texture_hover = ExtResource( 2 )

[node name="ColorRect" type="ColorRect" parent="UI"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -550.0
margin_bottom = -600.0
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ChangeMenu" type="HBoxContainer" parent="UI"]
margin_left = -210.0
margin_top = -515.0
margin_right = 20.0
margin_bottom = -85.0
custom_constants/separation = 10
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Buttons" type="VBoxContainer" parent="UI/ChangeMenu"]
material = SubResource( 13 )
margin_right = 230.0
margin_bottom = 430.0
rect_min_size = Vector2( 230, 0 )
custom_constants/separation = 10
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Restart" type="Button" parent="UI/ChangeMenu/Buttons"]
material = SubResource( 15 )
margin_right = 230.0
margin_bottom = 100.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="Quit" type="Button" parent="UI/ChangeMenu/Buttons"]
material = SubResource( 17 )
margin_top = 110.0
margin_right = 230.0
margin_bottom = 210.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="Save" type="Button" parent="UI/ChangeMenu/Buttons"]
material = ExtResource( 10 )
margin_top = 220.0
margin_right = 230.0
margin_bottom = 320.0
size_flags_horizontal = 3
size_flags_vertical = 3
disabled = true

[node name="Load" type="Button" parent="UI/ChangeMenu/Buttons"]
material = ExtResource( 10 )
margin_top = 330.0
margin_right = 230.0
margin_bottom = 430.0
size_flags_horizontal = 3
size_flags_vertical = 3
disabled = true

[node name="Push" type="TextureButton" parent="UI/ChangeMenu"]
margin_left = 240.0
margin_top = 205.0
margin_right = 260.0
margin_bottom = 225.0
focus_mode = 0
size_flags_vertical = 4
toggle_mode = true
enabled_focus_mode = 0
texture_normal = ExtResource( 12 )
texture_pressed = ExtResource( 11 )
texture_hover = ExtResource( 11 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/Close = SubResource( 3 )
anims/MenuClose = SubResource( 4 )
anims/MenuOpen = SubResource( 5 )
anims/Open = SubResource( 6 )
anims/power_up1 = SubResource( 7 )
anims/power_up2 = SubResource( 8 )
anims/power_up3 = SubResource( 9 )
anims/power_up4 = SubResource( 10 )
anims/power_up5 = SubResource( 11 )

[connection signal="pressed" from="UI/TopBar/Icons/OpenMenu" to="." method="_on_OpenMenu_pressed"]
[connection signal="pressed" from="UI/ChangeMenu/Buttons/Restart" to="." method="_on_Restart_pressed"]
[connection signal="pressed" from="UI/ChangeMenu/Buttons/Quit" to="." method="_on_Quit_pressed"]
[connection signal="toggled" from="UI/ChangeMenu/Push" to="." method="_on_Push_toggled"]
